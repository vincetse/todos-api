name: Docker Images
on: [push, pull_request]
env:
  IMAGE: ghcr.io/${{ github.repository }}
jobs:
  docker-images:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: infrastructureascode/postgres:11-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: test
          POSTGRES_PASSWORD: postgres
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      # Build and run tests first before building and pushing the
      # the images to the registry.
      - name: Build and run tests
        env:
          PGSSLMODE: require
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/test
          RAILS_ENV: test
          DATABASE_CLEANER_ALLOW_REMOTE_DATABASE_URL: true
        uses: buildpack-ci/run-tests@master

      # Tests passed.  Now build and push multiarch images.
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64/v8,linux/arm/v6
          push: true
          tags: ${{ env.IMAGE }}

      - name: Inspect images
        run: docker buildx imagetools inspect ${{ env.IMAGE }}
